// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol";
import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol";

interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract MyToken is ERC1155, Ownable, ERC1155Burnable, ERC1155Supply {

    mapping(uint256 => uint256) public price;
    mapping(uint256 => uint256) public supply;
    mapping(uint256 => uint256) public burnQ;

    uint256 public reserved = 500;

    address public apeAddress = 0xc1F77DdD6ba4f960AdE9429F0216728f9DF2713f;

    constructor() ERC1155("") {
        price[1] = 25 ether;
        price[2] = 100 ether;
        price[3] = 250 ether;
        price[4] = 500 ether;

        supply[1] = 2501;
        supply[2] = 1001;
        supply[3] = 501;
        supply[4] = 201;

        burnQ[2] = 5;
        burnQ[3] = 10;
        burnQ[4] = 15;
    }

    function setURI(string memory newuri) public onlyOwner {
        _setURI(newuri);
    }

    function mint(address account, uint256 id, uint256 amount) public onlyOwner {
        _mint(account, id, amount, "");
    }

    // function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) public onlyOwner {
    //     _mintBatch(to, ids, amounts, data);
    // }

    function mintBronzeA(uint256 q) public onlyOwner {
        require( totalSupply(1) < 1001, "Free Bronze Sold Out" );
        require( q > 0 && q < 4, "Invalid Quantity Given" );
        require( balanceOf(msg.sender, 1) + q < 4, "Cannot mint more than 3 free bronze" );

        _mint(msg.sender, 1, q, "");
    }

    function mintBronze(uint256 q) public onlyOwner {
        require( totalSupply(1) < supply[1] - 500, "Bronze Sold Out" );
        require( q > 0 && q < 5, "Invalid Quantity Given" );
        require( balanceOf(msg.sender, 1) + q < 5, "Cannot mint more than 3 free bronze" );

        _mint(msg.sender, 1, q, "");
        IERC20(apeAddress).transferFrom(msg.sender, address(this), price[1]*q);
    }

    function mint(uint256 id) public onlyOwner {
        require( id > 1 && id < 5, "Invalid Id");
        require( totalSupply(id) < supply[id], "Bronze Sold Out" );

        _mint(msg.sender, id, 1, "");
        IERC20(apeAddress).transferFrom(msg.sender, address(this), price[1]);
    }

    function burnMint(uint256 id) public onlyOwner {
        require( id > 1 && id < 5, "Invalid Id");
        require( totalSupply(id) < supply[id], "Bronze Sold Out" );

        burn(msg.sender, id, burnQ[id]);
        _mint(msg.sender, id, 1, "");
    }

    function _beforeTokenTransfer(address operator, address from, address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal override(ERC1155, ERC1155Supply){
        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
    }
}
